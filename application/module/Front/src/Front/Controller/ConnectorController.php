<?php

namespace Front\Controller;

use Common\Entity\Connector,
    Common\Service\Connector\TwitterOAuth;
use Zend\Mvc\Controller\AbstractActionController,
    Zend\Session\Container;

class ConnectorController extends AbstractActionController {

    public function __construct()
    {
        
    }

    public function indexAction()
    {
        $config  = $this->getServiceLocator()->get('config');
        $config  = $config['connectors'];

        $this->layout()->title = "connectors : ";

        return array(
            'config' => $config,
        );
    }

    public function twitterAction()
    {
        $config  = $this->getServiceLocator()->get('config');
        $config  = $config['connectors']['twitter'];
        $session = new Container("twitter");

        if ($this->params()->fromQuery('oauth_token', false) &&
            $this->params()->fromQuery('oauth_verifier', false)
        ) { // after granting access to the app, twitter returns to callback url from getRequestToken
            $connection = new TwitterOAuth(
                $config['consumer_key'],
                $config['consumer_secret'],
                $session->oauth_token,
                $session->oauth_token_secret
            ); // generated by twitter self
            $access_token = $connection->getAccessToken($this->params()->fromQuery('oauth_verifier', false));

            $user       = $this->auth()->getIdentity();

            $connectorRepo = $this->EmPlugin()->getEntityManager()->getRepository('Common\Entity\Connector');
            $connector     = $connectorRepo->findOneBy(array(
                'user' => $user->getId(),
                'type' => 'twitter',
                'name' => $access_token['screen_name'],
            ));
            if (is_null($connector)) {
                $connector   = new Connector();
            }   

            $connector->setValue(json_encode($access_token))
                      ->setType(Connector::FEED_TYPE_TWITTER)
                      ->setName($access_token['screen_name'])
                      ->setUser($user);

            $this->EmPlugin()->getEntityManager()->persist($connector);
            $this->EmPlugin()->getEntityManager()->flush();

            $this->flashMessenger()->addSuccessMessage('Great! You \'re now connected with Twitter.');
            return $this->redirect()->toRoute('connector', array('action' => 'close'));
        } else {
            $connection = new TwitterOAuth(
                $config['consumer_key'], 
                $config['consumer_secret']
            ); // generated by twitter self
            $request_token = $connection->getRequestToken($config['callback_url']); // this url needs to be set on settings page
            $url           = $connection->getAuthorizeURL($request_token['oauth_token']);

            $session->oauth_token = $request_token['oauth_token'];
            $session->oauth_token_secret = $request_token['oauth_token_secret'];

            $this->redirect()->toUrl($url);
        }
    }

    public function foursquareAction()
    {
        $config  = $this->getServiceLocator()->get('config');
        $config  = $config['connectors']['foursquare'];

        $oauth   = new \Common\Service\Connector\SocialApi();

        $oauth->provider      = "Foursquare";
        $oauth->client_id     = $config['client_id'];
        $oauth->client_secret = $config['client_secret'];
        $oauth->scope         = "";
        $oauth->redirect_uri  = $config['callback_url'];
        $oauth->Initialize();

        if ($this->params()->fromQuery('code', false)) {
            $oauth->code = $this->params()->fromQuery('code', false);
            $response    = json_decode($oauth->getUserProfile());
            $access_token= json_decode($oauth->accessToken);

            $user        = $this->auth()->getIdentity();

            $connectorRepo = $this->EmPlugin()->getEntityManager()->getRepository('Common\Entity\Connector');
            $connector     = $connectorRepo->findOneBy(array(
                'user'  => $user->getId(),
                'type'  => Connector::FEED_TYPE_FOURSQUARE,
                'name'  => $response->user->username,
            ));
            if (is_null($connector)) {
                $connector   = new Connector();
            }   

            $connector->setValue($access_token->access_token)
                      ->setType('foursquare')
                      ->setName($response->response->user->firstName . " " . $response->response->user->lastName)
                      ->setUser($user);

            $this->EmPlugin()->getEntityManager()->persist($connector);
            $this->EmPlugin()->getEntityManager()->flush();

            $this->flashMessenger()->addSuccessMessage('Great! You \'re now connected with Foursquare.');
            return $this->redirect()->toRoute('connector', array('action' => 'close'));
        } else {
            $oauth->Authorize();
        }
    }

    public function facebookAction()
    {
        $config  = $this->getServiceLocator()->get('config');
        $config  = $config['connectors']['facebook'];

        $oauth   = new \Common\Service\Connector\SocialApi();

        $oauth->provider      = "Facebook";
        $oauth->client_id     = $config['app_id'];
        $oauth->client_secret = $config['app_secret'];
        $oauth->scope         = "email,publish_stream,status_update,friends_online_presence,user_birthday,user_location,user_work_history";
        $oauth->redirect_uri  = $config['callback_url'];
        $oauth->Initialize();

        if ($this->params()->fromQuery('access_token', false)) {
            $oauth->accessToken = $this->params()->fromQuery('access_token', false);

            $response   = $oauth->curl_request("https://graph.connect.facebook.com/me/?", "GET", array(
                'client_id'     => $oauth->client_id,
                'client_secret' => $oauth->client_secret,
                'oauth_token'   => $oauth->accessToken,
            ));
            $response   = json_decode($response);
var_dump($response);die;
            $user        = $this->auth()->getIdentity();

            $connectorRepo = $this->EmPlugin()->getEntityManager()->getRepository('Common\Entity\Connector');
            $connector     = $connectorRepo->findOneBy(array(
                'user'  => $user->getId(),
                'type'  => Connector::FEED_TYPE_FACEBOOK,
                'name'  => $response->name,
            ));
            if (is_null($connector)) {
                $connector   = new Connector();
            }

            $connector->setValue($oauth->accessToken)
                      ->setType('facebook')
                      ->setName($response->name)
                      ->setUser($user);

            $this->EmPlugin()->getEntityManager()->persist($connector);
            $this->EmPlugin()->getEntityManager()->flush();

            $this->flashMessenger()->addSuccessMessage('Great! You \'re now connected with Facebook.');
            return $this->redirect()->toRoute('connector', array('action' => 'index'));
        } else {
           // $oauth->Authorize();
        }
    }

    public function instagramAction()
    {
        $config  = $this->getServiceLocator()->get('config');
        $config  = $config['connectors']['instagram'];

        $oauth   = new \Common\Service\Connector\SocialApi();

        $oauth->provider      = "Instagram";
        $oauth->client_id     = $config['client_id'];
        $oauth->client_secret = $config['client_secret'];
        $oauth->scope         = "comments+relationships+likes";
        $oauth->redirect_uri  = $config['callback_url'];
        $oauth->Initialize();

        if ($this->params()->fromQuery('code', false)) {
            $oauth->code = $this->params()->fromQuery('code', false);
            $response    = json_decode($oauth->getAccessToken());
            $access_token= $response->access_token;

            $user        = $this->auth()->getIdentity();

            $connectorRepo = $this->EmPlugin()->getEntityManager()->getRepository('Common\Entity\Connector');
            $connector     = $connectorRepo->findOneBy(array(
                'user' => $user->getId(),
                'type' => 'instagram',
                'name' => $response->user->username,
            ));
            if (is_null($connector)) {
                $connector   = new Connector();
            }            
            
            $connector->setValue($access_token)
                      ->setType(Connector::FEED_TYPE_INSTAGRAM)
                      ->setName($response->user->username)
                      ->setUser($user);

            $this->EmPlugin()->getEntityManager()->persist($connector);
            $this->EmPlugin()->getEntityManager()->flush();

            $this->flashMessenger()->addSuccessMessage('Great! You \'re now connected with Instagram.');
            return $this->redirect()->toRoute('connector', array('action' => 'close'));
        } else {
            $oauth->Authorize();
        }
    }

    public function deleteAction()
    {
        $request     = $this->getRequest();
        $connectorId = $this->params()->fromRoute('connectorId');
        
        $connectorRepo = $this->EmPlugin()->getEntityManager()->getRepository('Common\Entity\Connector');
        $connector     = $connectorRepo->findOneById($connectorId);

        if ($this->params()->fromRoute('confirm')) {
            $confirm = $this->params()->fromRoute('confirm');
            if ((int)$confirm === 1) {
                foreach($connector->getFeeds() as $feed) {
                    $feed->setConnector(null);
                }
            } elseif ((int)$confirm === 2) {
                foreach($connector->getFeeds() as $feed) {
                    $this->EmPlugin()->getEntityManager()->remove($feed);
                }
            }

            $this->EmPlugin()->getEntityManager()->remove($connector);
            $this->EmPlugin()->getEntityManager()->flush();
            
            $this->flashMessenger()->addSuccessMessage('Your connector has been deleted.');
            return $this->redirect()->toRoute('connector/wildcard', 
                array(
                    'action'     => 'index'
                ), array(), false);
        }

        $this->layout()->title = "delete connector";

        return array(
            'connector' => $connector
        );
    }
            
    public function closeAction()
    {
        return array();
    }
}